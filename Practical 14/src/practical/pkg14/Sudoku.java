/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package practical.pkg14;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.Timer;

/**
 *
 * @author vedant
 */
public class Sudoku extends javax.swing.JFrame {

    private JTextField JTextField;
    private String selectedDifficulty = "easy";
    /**
     * Creates new form Sudoku
     */
    public Sudoku() {
        initComponents();
        runBanner();
    }
    private void runBanner() {
    String bannerText = banner.getText();
    int bannerLength = bannerText.length();

    Timer t = new Timer(200, new ActionListener() {
        int count = 0;

        public void actionPerformed(ActionEvent e) {
            count = (count + 1) % bannerLength;
            banner.setText(bannerText.substring(count) + "   " + bannerText.substring(0, count));
        }
    });

    t.start();
}
    
    private void removeRandomCells(int[][] grid, int size, String difficulty,Random rand) {
    int totalCells = size * size;
    double percentageToRemove;

    switch (difficulty.toLowerCase()) {
        case "easy":
            percentageToRemove = 0.30;
            break;
        case "medium":
            percentageToRemove = 0.60;
            break;
        case "hard":
            percentageToRemove = 0.75;
            break;
        default:
            percentageToRemove = 0.30; 
    }

    int numbersToRemove = (int)(totalCells * percentageToRemove);

    while (numbersToRemove > 0) {
        int row = rand.nextInt(size);
        int col = rand.nextInt(size);
        if (grid[row][col] != 0) {
            grid[row][col] = 0;
            numbersToRemove--;
        }
    }
}

    private void fillGridWithoutDuplicates(int[][] grid, int size,Random rand) {
    for (int row = 0; row < size; row++) {
        boolean success;
        int attempts = 0;
        do {
            success = true;
            attempts++;
            if (attempts > 100) return;

            boolean[] usedInRow = new boolean[size + 1];
            for (int col = 0; col < size; col++) {
                int numAttempts = 0;
                int num;
                do {
                    num = rand.nextInt(size) + 1;
                    numAttempts++;
                    if (numAttempts > 100) {
                        success = false;
                        break;
                    }
                } while (usedInRow[num] || isNumberInColumn(grid, col, num, row));

                if (!success) break;

                grid[row][col] = num;
                usedInRow[num] = true;
            }
        } while (!success);
    }
}
private boolean isNumberInColumn(int[][] grid, int col, int num, int uptoRow) {
    for (int i = 0; i < uptoRow; i++) {
        if (grid[i][col] == num) return true;
    }
    return false;
}

private boolean isValidSolution(int[][] grid, int size) {
    for (int i = 0; i < size; i++) {
        boolean[] rowCheck = new boolean[size + 1];
        boolean[] colCheck = new boolean[size + 1];
        for (int j = 0; j < size; j++) {
            int rowVal = grid[i][j];
            int colVal = grid[j][i];

            if (rowVal < 1 || rowVal > size || rowCheck[rowVal]) return false;
            if (colVal < 1 || colVal > size || colCheck[colVal]) return false;

            rowCheck[rowVal] = true;
            colCheck[colVal] = true;
        }
    }
    return true;
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        banner = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter the Grid Size");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 252, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 249, Short.MAX_VALUE)
        );

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 1, 18)); // NOI18N
        jLabel2.setText("Sudoku");

        jButton1.setText("Start The game");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        banner.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        banner.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        banner.setText("This is the game Developed by @Vedant . Show Your Skills");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Easy", "Medium", "Hard" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTextArea1.setBackground(new java.awt.Color(255, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("\t         Rules\n\n1. You can only use the Numbers from \n     Range i.e size you enter.\n\n2. Each Horizontal row and Vertical Column\n    must contain all numbers within the range\n    without repetation.\n\n3. Ensure that each number appear only \n    once in a column and a row.\n\n4. Fill only empty cells i.e of yellow color\n\n\n");
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(186, 186, 186))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1)
                                .addGap(44, 44, 44))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(banner)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(banner)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     String input = jTextField1.getText();
    int gridSize = Integer.parseInt(input);

    if (gridSize > 0) {
    jPanel1.removeAll();
    jPanel1.setLayout(new java.awt.GridLayout(gridSize, gridSize, 5, 5));
    jPanel1.repaint();
    jPanel1.revalidate();

         int[][] solutionGrid = new int[gridSize][gridSize];
         int[][] grid = new int[gridSize][gridSize];
         Random rand = new Random(System.nanoTime());

        fillGridWithoutDuplicates(solutionGrid, gridSize, rand);
        for (int i = 0; i < gridSize; i++) {
            System.arraycopy(solutionGrid[i], 0, grid[i], 0, gridSize);
        }
        removeRandomCells(grid, gridSize, selectedDifficulty,rand);
        for (int row = 0; row < gridSize; row++) {
        for (int col = 0; col < gridSize; col++) {
            JTextField cell = new JTextField();
            cell.setHorizontalAlignment(JTextField.CENTER);

            if (grid[row][col] == 0) {
                cell.setText("");
                cell.setEditable(true);
                cell.setBackground(new Color(255, 255, 200));
            } else {
                cell.setText(String.valueOf(grid[row][col]));
                cell.setEditable(false);
                cell.setBackground(new Color(144, 238, 144));
            }
            jPanel1.add(cell);
        }
    }
}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    String input = jTextField1.getText();
    if (input.isEmpty() || !input.matches("\\d+")) {
        JOptionPane.showMessageDialog(this, "Please enter a valid grid size.");
        return;
    }

    int gridSize = Integer.parseInt(input);
    Component[] components = jPanel1.getComponents();

    if (components.length != gridSize * gridSize) {
        JOptionPane.showMessageDialog(this, "Grid is not fully initialized.");
        return;
    }

    int[][] userGrid = new int[gridSize][gridSize];

    for (int row = 0; row < gridSize; row++) {
        for (int col = 0; col < gridSize; col++) {
            int index = row * gridSize + col;
            JTextField cell = (JTextField) components[index];
            String text = cell.getText().trim();

            if (text.isEmpty()) {
                userGrid[row][col] = 0; // Allow empty cells to be treated as 0
            } else if (!text.matches("\\d+")) {
                JOptionPane.showMessageDialog(this, "Only numbers allowed at row " + (row + 1) + ", column " + (col + 1));
                return;
            } else {
                int value = Integer.parseInt(text);
                if (value < 1 || value > gridSize) {
                    JOptionPane.showMessageDialog(this, "Invalid number at row " + (row + 1) + ", column " + (col + 1) + " Out of Range");
                    return;
                }
                userGrid[row][col] = value;
            }
        }
    }

    if (isValidSolution(userGrid, gridSize)) {
        JOptionPane.showMessageDialog(this, "✅ Correct solution! Well done.");
    } else {
        JOptionPane.showMessageDialog(this, "❌ Incorrect solution. Try again.");
    }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        String selected = (String) jComboBox1.getSelectedItem();
        if (selected != null) {
        switch (selected.toLowerCase()) {
            case "easy":
            case "medium":
            case "hard":
                selectedDifficulty = selected.toLowerCase();
                break;
            default:
                selectedDifficulty = "easy"; // fallback
        }
    }    
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sudoku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sudoku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sudoku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sudoku.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sudoku().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel banner;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
